#!/usr/bin/env bash

GLOBAL_CONFIG=$HOME/.config/debrewery/debrewery.cfg
GLOBAL_CONFIG_DIR=$HOME/.config/debrewery
DEBREW_REMOTE_PORT='22'

function mountall {
    source $GLOBAL_CONFIG
    case $1 in
        "on")
            for distro in $DEBREW_DISTRIBUTIONS; do
                for arch in $DEBREW_ARCHITECTURES; do
                    mount --bind /opt/repo/ /opt/chroot/$distro/$arch/opt/repo
                    mount --bind /etc/resolv.conf /opt/chroot/$distro/$arch/etc/resolv.conf
                    mount --bind /root/.gnupg/ /opt/chroot/$distro/$arch/root/.gnupg/
                    mount --bind /root/.ssh/ /opt/chroot/$distro/$arch/root/.ssh/
                done
            done
            ;;
        "off")
            for distro in $DEBREW_DISTRIBUTIONS; do
                for arch in $DEBREW_ARCHITECTURES; do
                    umount /opt/chroot/$distro/$arch/opt/repo
                    umount /opt/chroot/$distro/$arch/etc/resolv.conf
                    umount /opt/chroot/$distro/$arch/root/.gnupg/
                    umount /opt/chroot/$distro/$arch/root/.ssh/
                done
            done
            ;;
    esac
}

case $1 in
    "setup")
        mkdir -p $GLOBAL_CONFIG_DIR
        echo -e "Specify the role of this machine: \n\e[0;33mAcceptable values: \e[0;31mdeveloper\e[0;33m or \e[0;31mbuildserver\e[0m"
        tput cuu 2; tput cuf 34
        read DEBREW_MACHINE_ROLE
        tput cud 2
        case $DEBREW_MACHINE_ROLE in
            "developer")
                echo -e "Specify the buildserver name: \n\e[0;33mUsed as a remote name in Git\e[0m"
                tput cuu 2; tput cuf 30
                read DEBREW_REMOTE_NAME
                tput cud 2
                echo -e "Specify the buildserver URL: \n\e[0;33mFormat: \e[0;31mhost:port\e[0m"
                tput cuu 2; tput cuf 29
                read DEBREW_REMOTE_URL
                tput cud 2
                DEBREW_REMOTE_HOST=`echo $DEBREW_REMOTE_URL | cut -f 1 -d ':'`
                DEBREW_REMOTE_PORT=`echo $DEBREW_REMOTE_URL | cut -f 2 -d ':'`
                if [ -z $DEBREW_REMOTE_PORT ]; then
                    DEBREW_REMOTE_PORT='22'
                fi
                cat <<EOF > $GLOBAL_CONFIG
DEBREW_MACHINE_ROLE="$DEBREW_MACHINE_ROLE"
DEBREW_REMOTE_NAME="$DEBREW_REMOTE_NAME"
DEBREW_REMOTE_HOST="$DEBREW_REMOTE_HOST"
DEBREW_REMOTE_PORT="$DEBREW_REMOTE_PORT"
EOF
                ;;
            "buildserver")
                echo -e "Specify supported distributions: \n\e[0;33mValues are comma separated, e.g. \e[0;31mjessie,trusty\e[0m"
                tput cuu 2; tput cuf 33
                read DEBREW_DISTRIBUTIONS
                tput cud 2
                echo -e "Specify supported CPU architectures: \n\e[0;33mValues are comma separated, e.g. \e[0;31mamd64,i386\e[0m"
                tput cuu 2; tput cuf 37
                read DEBREW_ARCHITECTURES
                tput cud 2
                echo -e "Specify the testing upload URL: \n\e[0;33mUsed for generating .dupload.conf\nFormat: \e[0;31mssh://[username]@[hostname]:[port]/[path to the incoming directory]\e[0m"
                tput cuu 3; tput cuf 32
                read DEBREW_DUPLOAD_TESTING_URL
                tput cud 3
                echo -e "Specify the production upload URL: \n\e[0;33mUsed for generating .dupload.conf\nFormat: \e[0;31mssh://[username]@[hostname]:[port]/[path to the incoming directory]\e[0m"
                tput cuu 3; tput cuf 35
                read DEBREW_DUPLOAD_PRODUCTION_URL
                tput cud 3
                DEBREW_DUPLOAD_TESTING_USERNAME=`echo $DEBREW_DUPLOAD_TESTING_URL | sed -e "s|^.*//||;s|@.*||"`
                DEBREW_DUPLOAD_TESTING_FQDN=`echo $DEBREW_DUPLOAD_TESTING_URL | sed -e "s|^.*@||;s|:.*||"`
                DEBREW_DUPLOAD_TESTING_PORT=`echo $DEBREW_DUPLOAD_TESTING_URL | sed -e "s|^.*:||;s|/.*||"`
                DEBREW_DUPLOAD_TESTING_PATH=`echo $DEBREW_DUPLOAD_TESTING_URL | sed -e "s|^.*[0-9]||"`
                DEBREW_DUPLOAD_PRODUCTION_USERNAME=`echo $DEBREW_DUPLOAD_PRODUCTION_URL | sed -e "s|^.*//||;s|@.*||"`
                DEBREW_DUPLOAD_PRODUCTION_FQDN=`echo $DEBREW_DUPLOAD_PRODUCTION_URL | sed -e "s|^.*@||;s|:.*||"`
                DEBREW_DUPLOAD_PRODUCTION_PORT=`echo $DEBREW_DUPLOAD_PRODUCTION_URL | sed -e "s|^.*:||;s|/.*||"`
                DEBREW_DUPLOAD_PRODUCTION_PATH=`echo $DEBREW_DUPLOAD_PRODUCTION_URL | sed -e "s|^.*[0-9]||"`
                cat <<EOF > $GLOBAL_CONFIG
DEBREW_MACHINE_ROLE="$DEBREW_MACHINE_ROLE"
DEBREW_DISTRIBUTIONS="`echo $DEBREW_DISTRIBUTIONS | tr ',' '\n'`"
DEBREW_ARCHITECTURES="`echo $DEBREW_ARCHITECTURES | tr ',' '\n'`"
DEBREW_DUPLOAD_TESTING_USERNAME="$DEBREW_DUPLOAD_TESTING_USERNAME"
DEBREW_DUPLOAD_TESTING_FQDN="$DEBREW_DUPLOAD_TESTING_FQDN"
DEBREW_DUPLOAD_TESTING_PORT="$DEBREW_DUPLOAD_TESTING_PORT"
DEBREW_DUPLOAD_TESTING_PATH="$DEBREW_DUPLOAD_TESTING_PATH"
DEBREW_DUPLOAD_PRODUCTION_USERNAME="$DEBREW_DUPLOAD_PRODUCTION_USERNAME"
DEBREW_DUPLOAD_PRODUCTION_FQDN="$DEBREW_DUPLOAD_PRODUCTION_FQDN"
DEBREW_DUPLOAD_PRODUCTION_PORT="$DEBREW_DUPLOAD_PRODUCTION_PORT"
DEBREW_DUPLOAD_PRODUCTION_PATH="$DEBREW_DUPLOAD_PRODUCTION_PATH"
EOF
                source $GLOBAL_CONFIG
                mountall off
                for distro in $DEBREW_DISTRIBUTIONS; do
                    for arch in $DEBREW_ARCHITECTURES;do
                        if [ -d /opt/chroot/$distro/$arch ];then
                            echo -n "Directory /opt/chroot/$distro/$arch already exists. Do you want to overwrite it?[y/N]: "
                            read answer
                            if [ $answer = 'y' ]; then
                                rm -fr /opt/chroot/$distro/$arch/*
                                debootstrap --arch=$arch --foreign $distro /opt/chroot/$distro/$arch/
                                chroot /opt/chroot/$distro/$arch/ /debootstrap/debootstrap --second-stage
                            else
                                echo "Leaving /opt/chroot/$distro/$arch untouched, hope that's ok."
                            fi
                        else
                            mkdir -p /opt/chroot/$distro/$arch/
                            debootstrap --arch=$arch --foreign $distro /opt/chroot/$distro/$arch/
                            mkdir /opt/chroot/$distro/$arch/opt/repo
                            mkdir /opt/chroot/$distro/$arch/root/.gnupg
                            mkdir /opt/chroot/$distro/$arch/root/.ssh
                        fi
                        cat << EOF > /opt/chroot/$distro/$arch/root/.dupload.conf
package config;
\$default_host = "testing";

\$cfg{'testing'} = {
    fqdn => "$DEBREW_DUPLOAD_TESTING_FQDN";
    login => "$DEBREW_DUPLOAD_TESTING_USERNAME";
    method => "scpb";
    options => "-P $DEBREW_DUPLOAD_TESTING_PORT";
    incoming => "$DEBREW_DUPLOAD_TESTING_PATH";
}
EOF
                        mount --bind /etc/resolv.conf /opt/chroot/$distro/$arch/etc/resolv.conf
                        chroot /opt/chroot/$distro/$arch/ apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "8C2C65DE"
                        chroot /opt/chroot/$distro/$arch/ bash -c 'apt-get -y --force-yes install lsb-release; echo "deb http://wasteland.ml/debian/ `lsb_release -cs` main contrib non-free" | tee /etc/apt/sources.list.d/wasteland.ml.list; apt-get update'
                        echo 'export LANG=C' > /opt/chroot/$distro/$arch/root/.bashrc
                    done
                done
                mountall on
                if ! grep -oq "/usr/bin/debrew mountall on" /etc/rc.local; then
                    echo "/usr/bin/debrew mountall on" >> /etc/rc.local
                fi
                ;;
        esac
        ;;
    "enable")
        if [ -f $GLOBAL_CONFIG ]; then
            source $GLOBAL_CONFIG
            case $DEBREW_MACHINE_ROLE in
                "developer")
                    echo -n "Enter project name: "
                    read PROJECT_NAME
                    echo -n "Enter project version: "
                    read PROJECT_VERSION
                    cd $2
                    git init
                    git remote add $DEBREW_REMOTE_NAME "ssh://root@"$DEBREW_REMOTE_HOST":"$DEBREW_REMOTE_PORT"/opt/repo/"$2".git"
                    dh_make --createorig -s -y -p $PROJECT_NAME"_"$PROJECT_VERSION
                    cat <<EOF > debian/package.sh
export DEBFULLNAME="$DEBFULLNAME"
export DEBEMAIL="$DEBEMAIL"
NAME="$PROJECT_NAME"
FLAVOURS="any"
EOF
                    cd .. && git clone --bare $2 $2".git"
                    ssh -p $DEBREW_REMOTE_PORT "root@"$DEBREW_REMOTE_HOST mkdir -p /opt/repo
                    scp -P $DEBREW_REMOTE_PORT -r $2".git" "root@"$DEBREW_REMOTE_HOST":/opt/repo/"
                    ssh -p $DEBREW_REMOTE_PORT "root@"$DEBREW_REMOTE_HOST ln -s /usr/lib/debrewery/post-receive /opt/repo/"$2".git/hooks/post-receive
                    echo -e "\n\n\nProject successfully enabled"
                    ;;
                *)
                    echo "This command is only supported in \"developer\" machine role"
                    ;;
            esac
        else
            echo "No config file found"
            exit 1
        fi
        ;;
    "disable")
        if [ -f $GLOBAL_CONFIG ]; then
            source $GLOBAL_CONFIG
            case $DEBREW_MACHINE_ROLE in
                "developer")
                    cd $2 && git remote rm $DEBREW_REMOTE_NAME
                    echo "Remote \"$DEBREW_REMOTE_NAME\" deleted"
                    ;;
                *)
                    echo "This command is only supported in \"developer\" machine role"
                    ;;
            esac
        else
            echo "No config file found"
            exit 1
        fi
        ;;
    "upgrade")
        echo "Not implemented yet"
        ;;
    "mountall")
        case $2 in
            "on")
                mountall on
                ;;
            "off")
                mountall off
                ;;
        esac
        ;;
    "doctor")
        echo "Not implemented yet"
        ;;
esac
